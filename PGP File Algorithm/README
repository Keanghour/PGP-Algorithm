# PGP File Algorithm

This project demonstrates how to generate PGP keys (public and private), and use them to encrypt and decrypt files using the Bouncy Castle library.

## Features
- Generate RSA key pairs (2048, 4096, etc.).
- Export public and private keys as ASCII-armored files.
- Encrypt and decrypt files using PGP encryption.
- Use a passphrase to encrypt the private key.

## Prerequisites
- Java 8 or higher.
- Bouncy Castle library version 1.76 or 1.80. Include the dependencies in your `pom.xml` (Maven).

For **Bouncy Castle 1.76**:
```xml
<dependency>
    <groupId>org.bouncycastle</groupId>
    <artifactId>bcpkix-jdk18on</artifactId>
    <version>1.76</version>
</dependency>
<dependency>
    <groupId>org.bouncycastle</groupId>
    <artifactId>bcprov-jdk18on</artifactId>
    <version>1.76</version>
</dependency>
```

For **Bouncy Castle 1.80**:
```xml
<dependency>
    <groupId>org.bouncycastle</groupId>
    <artifactId>bcpkix-jdk18on</artifactId>
    <version>1.80</version>
</dependency>
<dependency>
    <groupId>org.bouncycastle</groupId>
    <artifactId>bcprov-jdk18on</artifactId>
    <version>1.80</version>
</dependency>
```

## How to Use

### 1. Generate Key Pair

To generate a key pair, use the `generateKeyPair` method, providing the name, email, passphrase, public key file path, private key file path, and desired key size (e.g., 2048 or 4096).

Example:
```java
PGPAlgorithm.generateKeyPair("John Doe", "john.doe@example.com", "secretPassphrase", "publicKey.asc", "privateKey.asc", 2048);
```

This will create public and private keys in ASCII-armored format.

### 2. Encrypt a File

To encrypt a file using the public key, use the `encryptFile` method:

Example:
```java
PGPAlgorithm.encryptFile("input.txt", "encrypted.asc", "publicKey.asc");
```

This will encrypt the file `input.txt` using the provided public key and save the encrypted file as `encrypted.asc`.

### 3. Decrypt a File

To decrypt a file, use the `decryptFile` method with the encrypted file, output file path, private key, and passphrase:

Example:
```java
PGPAlgorithm.decryptFile("encrypted.asc", "decrypted.txt", "privateKey.asc", "secretPassphrase");
```

This will decrypt the file `encrypted.asc` using the provided private key and passphrase, saving the output as `decrypted.txt`.

## Code Overview

- **`generateKeyPair`**: Generates an RSA key pair and saves both the public and private keys in ASCII-armored files.
- **`encryptFile`**: Encrypts a file using a public key and saves the encrypted file.
- **`decryptFile`**: Decrypts an encrypted file using a private key and passphrase.
- **Helper Methods**: `readPublicKey` and `readPrivateKey` are used to read the keys from the file system.

## License

This project is open-source and free to use or modify.

---

**Contact:**
- Email: phokeanghour12@gmail.com
- Telegram: 095 323 346 | @phokeanghour

---

**Credit**: This project was created by **Pho Keanghour**.